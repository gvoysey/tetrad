receptor_matrix = [
    2 1 1 2 1 1 2 1 2 1 2 2 0 1 2 2 1 2 1 2 1 2 1 2 0 2 2 1 2 2 2 2 1 1 2 0 2 1 2 2 0 3 1;
    0 1 1 1 1 0 1 2 2 0 2 2 1 1 2 2 0 1 0 1 0 2 2 1 1 1 2 1 2 2 2 2 2 2 2 2 1 0 2 2 0 3 2;
    0 2 1 2 2 1 2 1 1 1 1 2 2 1 0 2 2 2 1 0 1 2 2 0 0 2 2 1 2 0 2 0 0 2 0 0 1 2 2 2 0 1 1;
    0 1 1 2 1 1 2 2 2 1 1 2 1 1 1 2 2 1 2 1 0 1 1 2 0 0 1 1 2 1 2 0 0 0 0 0 2 1 1 1 0 1 0;
    0 0 2 1 2 2 2 1 2 0 1 0 2 2 1 2 0 2 0 0 0 2 2 2 0 1 1 2 2 1 2 0 2 1 0 0 1 1 1 1 0 1 0;
    0 2 1 2 1 0 1 1 2 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 2 1 1 1 1 0 1;
    0 0 1 2 0 1 2 0 0 2 2 2 0 2 2 1 0 1 0 1 1 0 2 1 0 1 0 0 0 2 2 0 2 1 1 0 2 0 2 1 0 2 1;
    0 0 0 0 0 0 1 0 0 0 0 2 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 2 2 0 0 0 2 0 0 0 2 0 0 2 1;
    0 0 2 0 0 0 0 1 2 0 0 1 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 2 0 0 0 0 2 0 0 0 2 0 0 2 1;
    0 0 1 0 4 0 0 0 0 0 0 1 0 0 0 1 4 0 4 4 0 0 4 2 0 0 4 4 0 0 2 4 0 0 0 0 1 0 0 0 4 3 1;
    0 0 0 1 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 2 0 0 0 0 0 1 1 1 0 0 1 0;
    0 0 0 0 4 0 1 0 0 0 0 1 0 0 1 0 4 0 4 4 0 0 4 0 0 0 4 4 0 0 1 4 0 0 0 0 0 0 0 0 4 2 0;
    0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 4 0 0 1 0 0 0 0 0 0 2 2;
    0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 2 0 0 0 0 0 0 1 3;
    0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 4 0 4 4 0 0 4 0 0 0 4 4 1 0 0 4 0 0 1 0 0 0 0 0 4 2 0;
    0 0 0 0 4 0 0 1 0 0 0 1 0 0 0 0 4 0 4 4 0 0 4 0 0 0 4 4 0 0 1 4 0 0 0 0 1 0 0 0 4 2 0;
    0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 1;
    0 0 1 0 4 0 0 0 0 0 0 1 0 0 0 0 4 0 4 4 1 0 4 0 0 0 4 4 1 0 0 4 0 0 0 0 1 0 0 0 4 2 0;
    0 0 0 0 4 0 0 1 0 0 0 0 0 0 0 0 4 0 4 4 0 0 4 0 0 0 4 4 1 0 0 4 0 0 0 0 0 0 0 0 4 2 0;
    0 0 0 0 4 0 0 1 0 0 0 0 0 0 0 0 4 0 4 4 0 0 4 0 0 0 4 4 1 0 0 4 0 0 0 0 0 0 0 0 4 2 1;
    0 0 0 0 4 0 1 0 0 0 0 0 0 0 0 0 0 0 4 4 0 0 4 0 0 0 4 4 0 0 1 4 0 0 1 0 0 0 0 0 4 1 0;
    0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 2 0 0 0 0 0 0 0 0 0 0 0 0;
    0 0 0 0 4 0 1 0 0 0 0 0 0 0 0 0 4 0 4 4 0 0 4 0 0 0 4 4 0 0 0 4 0 0 0 0 0 0 0 0 4 1 0;
    0 0 0 0 4 0 1 0 0 0 0 0 0 0 0 0 4 0 4 4 0 0 4 0 0 0 4 4 0 0 0 4 0 0 0 0 0 0 0 0 4 1 0;
    2 1 3 3 3 2 3 3 0 3 3 3 3 3 3 2 0 3 0 1 3 2 3 3 0 3 2 1 2 3 2 0 3 2 3 3 1 3 3 3 3 3 3;
    0 2 2 2 3 0 3 2 2 3 2 2 3 2 2 3 2 2 2 2 0 3 3 3 0 3 2 2 2 2 1 2 2 1 2 0 2 2 2 2 2 0 2;
    0 2 1 0 4 0 2 1 0 1 1 2 0 2 2 2 4 0 4 4 1 1 4 0 0 1 4 4 2 0 2 4 1 1 0 1 2 0 1 2 4 0 0;
    1 0 0 1 0 0 2 0 0 0 0 2 0 2 0 1 0 0 0 0 1 2 2 0 0 1 0 0 0 3 2 0 3 3 2 0 1 0 3 0 0 2 2;
    0 0 2 1 1 0 3 1 1 0 0 1 0 1 1 2 1 1 1 1 0 2 2 1 0 1 1 1 2 0 0 1 0 1 1 0 2 1 1 1 0 0 0;
    0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 0 2 0 0 0 0 2 0 0 0 0 0 0 2 0 0 2 0 3 0 0 0 2 0 0 2 2;
    0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 2 3;
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 3 0 0 0 0 3 0 0 0 3 0 0 2 2
    ];

weights = [6 3 3 10 9 7 7 10 6 4 8 10 3 3 4 3 7 2 8 7 10 ...
 4 1 1 1 2 2 2 1 6 2 2 2 2 2 4 2 2 1 2 2 8 8]./10;

weights2 = [2 2 3 3 2 2 3 3 2 3 3 2 2 3 2 3 1 3 3 3 2 1 1 1 1 1 1 1 3 1 ...
    1 1 1 1 2 1 1 1 1 1 3 3]./3;

w = [1 .33 1 .67];


% test on results
A = [0 3 0 2]; B = [1 3 3 1]; C = [1 1 2 1]; D = [2 2 1 1]; E = [0 3 1 3];
AB = sum([A.^2 + B.^2].*w);
AC = sum([A.^2 + C.^2].*w);
AD = sum([A.^2 + D.^2].*w);
AE = sum([A.^2 + E.^2].*w);
BC = sum([B.^2 + C.^2].*w);
BD = sum([B.^2 + D.^2].*w);
BE = sum([B.^2 + E.^2].*w);
CD = sum([C.^2 + D.^2].*w);
CE = sum([C.^2 + D.^2].*w);
DE = sum([D.^2 + E.^2].*w);
% AB = sum([A + B].*w)
% AC = sum([A + C].*w)
% AD = sum([A + D].*w)
% AE = sum([A + E].*w)
% BC = sum([B + C].*w)
% BD = sum([B + D].*w)
% BE = sum([B + E].*w)
% CD = sum([C + D].*w)
% CE = sum([C + D].*w)
% DE = sum([D + E].*w)

% disp('A:')
% disp(A)
% disp('B:')
% disp(B)
% 
% sumOfSquares = A.^2 + B.^2;
% sOSWeight = sumOfSquares .* w;
% fprintf('Sum of Squares:\n')
% disp(sumOfSquares)
% fprintf('Sum of Squares, weighted:\n')
% disp(sOSWeight)
% 
% weightA = A.*w;
% weightB = B.*w;
% fprintf('Weighted A:')
% disp(weightA)
% fprintf('Weighted B:')
% disp(weightB)
% weightSOS = weightA.^2 + weightB.^2;
% fprintf('Weighted Vector Sum of Squares:\n')
% disp(weightSOS)

